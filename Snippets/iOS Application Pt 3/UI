*****************
Snip 1 - Framework

class AmbientLightViewController: UIViewController {

override func viewDidLoad() {
super.viewDidLoad()

}

//
// MARK: - Private functions
//
private func setupSubscriptions() {

}

private func enableButtons(buttons: [UIButton]) {

}

private func disableButtons(buttons: [UIButton]) {

}

//
// MARK: - Gesture Recogniser handler
//
@objc private func handlePan(sender: UIPanGestureRecognizer) {

}

//
// MARK: - UI Action Handlers
//
@IBAction func applyButtonTouchUpInside(_ sender: UIButton) {

}

@IBAction func cancelbuttonTouchUpInside(_ sender: UIButton) {

}

@IBAction func offOnSwitchValueChanged(_ sender: UISwitch) {

}

}

//
// MARK: - Picker View delegate
//
extension AmbientLightViewController : UIPickerViewDelegate {


}

//
// MARK: - Picker View Data Source
//
extension AmbientLightViewController : UIPickerViewDataSource {

}

//
// MARK: - Gesture Recogniser delegate
//
extension AmbientLightViewController : UIGestureRecognizerDelegate {

}

*******************
Snip 2 - Model injection

typealias Depends = DependModel

private var model: ModelInjectable?

if let ad = UIApplication.shared.delegate as? AppDelegate, let adDeps: Depends = ad.dependencies {
model = adDeps.model
}

*******************
Snip 3 - View did Load

lightLevelPicker.delegate = self
lightLevelPicker.dataSource = self
hysteresisPicker.delegate = self
hysteresisPicker.dataSource = self

setupSubscriptions()

if let md = model {
md.get(entity: kEntityAlsThresh)
md.get(entity: kEntityAlsHyst)
}

**********************
Snip 4 - Picker view data source

func numberOfComponents(in pickerView: UIPickerView) -> Int {
if pickerView == lightLevelPicker { return 1 }
else if pickerView == hysteresisPicker { return 1 }
else { return 0 }
}

func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
if pickerView == lightLevelPicker {
return (alsThreshMaxValue - alsThreshMinValue) + 1
}
else if pickerView == hysteresisPicker {
return (alsHystMaxValue - alsHystMinValue) + 1
}

return 0
}

func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
if pickerView == lightLevelPicker {
return( String(row + alsThreshMinValue) )
}
else if pickerView == hysteresisPicker {
return String( row + alsHystMinValue )
}

return nil
}

return nil
}

*********************
Snip 5 - Picker delegate

nothing??

*********************
Snip 6 - Add gesture handlers (add before setupSubscriptions)

let tgr1 = UIPanGestureRecognizer(target: self, action: #selector(handlePan(sender:)))
tgr1.delegate = self
lightLevelPicker.addGestureRecognizer(tgr1)
let tgr2 = UIPanGestureRecognizer(target: self, action: #selector(handlePan(sender:)))
tgr2.delegate = self
hysteresisPicker.addGestureRecognizer(tgr2)

**********************
Snip 7 - Gesture co-existence/delegate

internal func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool {
return true
}

*********************
Snip 8 - button setters

private func enableButtons(buttons: [UIButton]) {
for b in buttons {
b.isEnabled = true
b.alpha = 1.0
}
}

private func disableButtons(buttons: [UIButton]) {
for b in buttons {
b.isEnabled = false
b.alpha = 0.5
}
}

*********************
Snip 9 - button setters and gesture handler

@objc private func handlePan(sender: UIPanGestureRecognizer) {
if sender.state == .began && applyButton.isEnabled == false {
priorState = (lightLevelPicker.selectedRow(inComponent: 0), hysteresisPicker.selectedRow(inComponent: 0))
enableButtons(buttons: [applyButton, cancelButton])
}
}

******************
Snip 10 - Apply button handler

@IBAction func applyButtonTouchUpInside(_ sender: UIButton) {
if let md = model {
md.set(entity: kEntityAlsThresh,
value: lightLevelPicker.selectedRow(inComponent: 0) + alsThreshMinValue,
response: false)
md.set(entity: kEntityAlsHyst,
value: hysteresisPicker.selectedRow(inComponent: 0) + alsHystMinValue,
response: false)
disableButtons(buttons: [applyButton, cancelButton])
priorState = (0, 0)
}
}

*******************
Snip 11 - Cancel button handler

@IBAction func cancelbuttonTouchUpInside(_ sender: UIButton) {
lightLevelPicker.selectRow(priorState.threshRow, inComponent: 0, animated: true)
hysteresisPicker.selectRow(priorState.hystRow, inComponent: 0, animated: true)
disableButtons(buttons: [applyButton, cancelButton])
}

********************
Snip 12 - Subscriptions for thresh and hyst

nc.addObserver(forName: .entityAlsThresh,
object: nil,
queue: OperationQueue.main,
using: { notification in
if let payload = notification.object as? IntegerPayload {
self.lightLevelPicker.selectRow(payload.value - alsThreshMinValue,
inComponent: 0,
animated: true)
self.disableButtons(buttons: [self.applyButton, self.cancelButton])
}
})
nc.addObserver(forName: .entityAlsHyst,
object: nil,
queue: OperationQueue.main,
using: { notification in
if let payload = notification.object as? IntegerPayload {
self.hysteresisPicker.selectRow(payload.value - alsHystMinValue,
inComponent: 0,
animated: true)
self.disableButtons(buttons: [self.applyButton, self.cancelButton])
}
})

********************
Snip 13 - OffOn Switch handler

@IBAction func offOnSwitchValueChanged(_ sender: UISwitch) {
if let md = model {
md.set(entity: kEntityAlsOffOn, value: sender.isOn, response: false)
}
}

********************
Snip 14 - OffOn Subscription

nc.addObserver(forName: .entityAlsOffOn,
object: nil,
queue: OperationQueue.main,
using: {notification in
if let payload = notification.object as? BinaryPayload {
self.offOnSwitch.isOn = payload.value
self.lightLevelPicker.isUserInteractionEnabled = payload.value
self.hysteresisPicker.isUserInteractionEnabled = payload.value
}
})



