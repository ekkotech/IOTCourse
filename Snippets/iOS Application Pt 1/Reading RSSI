/*** Snippets for iOS Application Part 1, BleService Skeleton ***/

/*** Reading_RSSI_Snip_1 ***/
/*** In BleService ***/

a)
static let rssiValueChanged = Notification.Name("rssiValueChanged")

b)
internal struct RssiValueChangedPayload {
    var value: Int
}

/*** End ***/

/*** Reading_RSSI_Snip_2 ***/

func readRssi() {
    opQueue.addOperation(AppOperation(queue: cmdQueue,
                                      dispatchBlock: {
                                        self.activeCommand = ActiveCommand(suuid: nil,
                                                                           cuuid: nil,
                                                                           command: .readRSSI)
                                        self.cmdQueue.async { self.handleEvent(event: .ReadRSSI) }
    }))
}

/*** End ***/

/*** Reading_RSSI_Snip_3 ***/

func performReadRSSI(thisEvent: BEvent, thisState: BState) throws {
    os_log("In performReadRSSI, event: %s state %s", log: Log.ble, type: .info, thisEvent.description, thisState.description)
    guard case BEvent.ConnectSuccess(let payload) = thisEvent, let pl = payload else {
        throw BleError.InvalidPayload }
    
    pl.peripheral.readRSSI()
}

/*** End ***/

/*** Reading_RSSI_Snip_4 ***/

func peripheral(_ peripheral: CBPeripheral, didReadRSSI RSSI: NSNumber, error: Error?) {
    os_log("In didReadRSSI: %d", log: Log.ble, type: .info, RSSI.intValue)
    guard error == nil else {
        os_log("ERROR: reading RSSI", log: Log.ble, type: .error)
        return
    }
    
    nc.post(name: .rssiValueChanged,
            object: RssiValueChangedPayload(value: RSSI.intValue))
}

/*** End ***/

/*** Reading_RSSI_Snip_5 ***/

a)
actionMap[.Ready]?[.ReadRSSI] = (action: performConnect, nextState: .ReadRSSI)

b)
//
actionMap[.ReadRSSI]?[.ConnectSuccess(nil)] = (action: performReadRSSI, nextState: .Ready)
actionMap[.ReadRSSI]?[.ConnectFail] = (action: performNullAction, nextState: .Ready)
actionMap[.ReadRSSI]?[.OffLine] = (action: performNullAction, nextState: .Start)

/*** End ***/

/*** Reading_RSSI_Snip_6 ***/
/*** In Model ***/

a)
internal let kEntityRSSI            = "rssi"        // NOTE: Not a real entity

b)
static let entityRSSI = Notification.Name(kEntityRSSI)

c)
internal struct IntegerPayload {
    var value: Int
}

/*** End ***/

/*** Reading_RSSI_Snip_7 ***/

func getRssi() {
    // Make a direct call to BleService
    bleService.readRssi()
}

/*** End ***/

/*** Reading_RSSI_Snip_8 ***/

// RSSI value changed
nc.addObserver(forName: .rssiValueChanged,
               object: nil,
               queue: nil,
               using: { notification in
                if let payload = notification.object as? RssiValueChangedPayload {
                    os_log("RSSI: %d", log: Log.model, type: .info, payload.value)     // Temporary for debugging
                    nc.post(name: .entityRSSI, object: IntegerPayload(value: payload.value))
                }
})

/*** End ***/
