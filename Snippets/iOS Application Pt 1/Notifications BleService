/*** Snippets for iOS Application Part 1, BleService Skeleton ***/

/*** Notifications_BleService_Snip_1 ***/

actionMap[.Ready]?[.SetNotify] = (action: performConnect, nextState: .RWNotify)

/*** End ***/

/*** Notifications_BleService_Snip_2 ***/

    static let characNotifyStateChanged = Notification.Name("characNotifyStateChanged")
    static let characValueChanged = Notification.Name("characValueChanged")


internal struct CharacNotifyStateChangedPayload {
    var charac: CBUUID
    var state: Bool
}

internal struct CharacValueChangedPayload {
    var charac: CBUUID
    var data: Data
}

/*** End ***/

/*** Notifications_BleService_Snip_3 ***/

   func setNotify(service: CBUUID, charac: CBUUID, state: Bool) {

       activeCommand = ActiveCommand(suuid: service,
                                     cuuid: charac,
                                     command: .setNotify(state))
       cmdQueue.async { self.handleEvent(event: .SetNotify) }
       
   }

/*** End ***/

/*** Notifications_BleService_Snip_4 ***/
/*** Add case to performCommand ***/

case .setNotify(let state):
    pl.peripheral.setNotifyValue(state, for: pl.charac)

/*** End ***/

/*** Notifications_BleService_Snip_5 ***/

func peripheral(_ peripheral: CBPeripheral, didUpdateNotificationStateFor characteristic: CBCharacteristic, error: Error?) {
    os_log("In didUpdateNotificationStateFor: %s", log: Log.ble, type: .info, characteristic.uuid.uuidString)
    guard error == nil else {
        os_log("ERROR: updating notification state", log: Log.ble, type: .error)
        return
    }

    nc.post(name: .characNotifyStateChanged,
            object: CharacNotifyStateChangedPayload(charac: characteristic.uuid,
                                                    state: characteristic.isNotifying))

}

/*** End ***/

/*** Notifications_BleService_Snip_5 ***/

func peripheral(_ peripheral: CBPeripheral, didUpdateValueFor characteristic: CBCharacteristic, error: Error?) {
    os_log("In didUpdateValueFor: %s", log: Log.ble, type: .info, characteristic.uuid.uuidString)
    guard error == nil else {
        os_log("ERROR: updating characteristic value", log: Log.ble, type: .error)
        return
    }
    
    if let cval = characteristic.value {
        nc.post(name: .characValueChanged,
                object: CharacValueChangedPayload(charac: characteristic.uuid,
                                                  data: cval))
    }
}

/*** End ***/
