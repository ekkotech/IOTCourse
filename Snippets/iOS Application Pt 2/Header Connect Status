****************
Snip 1 - Topic name (BleService)

static let connectStatus = Notification.Name("connectStatus")

****************
Snip 2 - Connect status enum (BleService)

//
// Connection status
//
internal enum ConnectStatus {
case connected
case disconnected
}

****************
Snip 3 - Payload (BleService)

internal struct ConnectStatusPayload {
var status: ConnectStatus
}

****************
Snip 4 - didConnect (BleService)

nc.post(name: .connectStatus,
object: ConnectStatusPayload(status: .connected))

****************
Snip 5 - didFailToConnect (BleService)

nc.post(name: .connectStatus, object: ConnectStatusPayload(status: .disconnected))

****************
Snip 6 - didDisconnect (BleService)

nc.post(name: .connectStatus, object: ConnectStatusPayload(status: .disconnected))

****************
Snip 7 - Setup subscriptions (HeaderVC)

private func setupSubscriptions() {
nc.addObserver(forName: .bleStatus,
object: nil,
queue: OperationQueue.main,
using: { notification in
if let payload = notification.object as? BleStatusPayload {
if payload.status == .ready {
self.connectStatusImage.image = UIImage(named: notConnectedImageName)
}
else {
self.connectStatusImage.image = UIImage(named: notAttachedImageName)
}
self.rssiLabel.text = "---"
}
})
nc.addObserver(forName: .connectStatus,
object: nil,
queue: OperationQueue.main,
using: { notification in
if let payload = notification.object as? ConnectStatusPayload {
if payload.status == .connected {
self.connectStatusImage.image = UIImage(named: connectedImageName)
}
else if payload.status == .disconnected {
self.connectStatusImage.image = UIImage(named: notConnectedImageName)
}
}
})

}

******************
Snip 8 - setup subscriptions

setupSubscriptions()

