****************
Snip 1 - Value for location function template

private func valueForBoundedLocation(location: CGPoint, bounds: CGRect) -> UIColor {

let position = location.x < bounds.origin.x ? 0.0 : (location.x >= bounds.origin.x + bounds.width ? 1.0 : (location.x - bounds.origin.x) / bounds.width)

switch channel {
case .red:
return _value.withRedComponent(position)
case .green:
return _value.withGreenComponent(position)
case .blue:
return _value.withBlueComponent(position)
case .mono:
return _value.withBrightnessComponent(position)

}
}

****************
Snip 2 - Gesture recogniser function templates

//
// MARK: - Action Handlers
//
@objc private func handleTap(_ sender: UITapGestureRecognizer) {
if sender.state == .ended {
_value = valueForBoundedLocation(location: sender.location(in: self), bounds: activeFrame)
sendActions(for: .valueChanged)
}
}

@objc private func handlePan(_ sender: UIPanGestureRecognizer) {
if sender.state == .began || sender.state == .changed || sender.state == .ended {
_value = valueForBoundedLocation(location: sender.location(in: self), bounds: activeFrame)
sendActions(for: .valueChanged)
}
}

****************
Snip 4 - Add gesture recognisers

addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(handleTap)))
addGestureRecognizer(UIPanGestureRecognizer(target: self, action: #selector(handlePan)))

*******************
Snip 5 - Value updates - add to set {} in ColourSlider vaue property

switch channel {
case .red:
startColor = value.withRedComponent(0.0)
endColor = value.withRedComponent(1.0)
case .green:
startColor = value.withGreenComponent(0.0)
endColor = value.withGreenComponent(1.0)
case .blue:
startColor = value.withBlueComponent(0.0)
endColor = value.withBlueComponent(1.0)
case .mono:
startColor = UIColor.black
endColor = UIColor.white
}
trackLayer.colors = [startColor.cgColor, endColor.cgColor]
updateThumbTack(thumb: thumbTack, color: value, channel: channel)



